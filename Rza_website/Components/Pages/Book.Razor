@using Rza_website.Services
@using Rza_website.Utilties
@using Rza_website.Models
@inject AttractionService AttractionService


@page "/Book"
<link rel=" stylesheet" href="~/css/Style.css" />

<h2 style="text-align: center;">Book Your Visit</h2>

<div class="booking-form">
    <form>
        
        <div class="form-group">
            <label for="visitDate">Select Visit Date</label>
            <input type="date" id="visitDate" class="form-control" />
        </div>

        
        <div class="form-group">
            <label for="adults">Adults £14.99 </label>
            <input type="number" id="adults" min="1" max="10" class="form-control" placeholder="1" />
        </div>

        
        <div class="form-group">
            <label for="children">Children £9.99 </label>
            <input type="number" id="children" min="0" max="10" class="form-control" placeholder="0" />
        </div>

        
        <div class="form-group">
            <label for="fullName">Full Name</label>
            <input type="text" id="fullName" class="form-control" placeholder="Enter your full name" />
        </div>

        
        <div class="form-group">
            <label for="email">Email Address</label>
            <input type="email" id="email" class="form-control" placeholder="Enter your email address" />
        </div>

        
        <button type="submit" class="btn-submit">Submit Booking</button>
    </form>
</div>

@if (attractions != null)
{
    @foreach (Attraction attraction in attractions)
    {
        <div>
            @attraction.Name: £@attraction.Price
            <button @onclick="@(e => AddTicket(attraction.AttractionId))">Add to Basket</button>
        </div>
    }
    <button>Book Tickets</button>
}
else
{
    <div>no attractions</div>
}


@code {
    List<Attraction> attractions;
    List<Ticket> tickets;
    protected override async Task OnInitializedAsync()
    {
        attractions = await AttractionService.GetAttractionsAsync();
        tickets = new List<Ticket>();
    }
    private void AddTicket(int attractionId)
    {
        Ticket newTicket = new Ticket();
        newTicket.AttractionId = attractionId;
        newTicket.Date = DateOnly.FromDateTime(DateTime.Now);
    }
    private void BookTicekts()
    {

    }
}